basePath: /api/v1
definitions:
  http_error.Causes:
    properties:
      field:
        type: string
      message:
        type: string
    type: object
  http_error.HttpError:
    properties:
      causes:
        items:
          $ref: '#/definitions/http_error.Causes'
        type: array
      code:
        type: integer
      error:
        type: string
      message:
        type: string
    type: object
  request.OrderRequest:
    properties:
      amount:
        minimum: 0.01
        type: number
      payee:
        type: string
      payer:
        type: string
    required:
    - amount
    - payee
    - payer
    type: object
  request.UserRequest:
    properties:
      balance:
        minimum: 0
        type: number
      document:
        maxLength: 11
        minLength: 4
        type: string
      email:
        type: string
      first_name:
        maxLength: 50
        type: string
      is_merchant:
        default: false
        type: boolean
      last_name:
        maxLength: 50
        type: string
      password:
        minLength: 6
        type: string
    required:
    - balance
    - document
    - email
    - first_name
    - last_name
    - password
    type: object
  request.UserUpdateRequest:
    properties:
      balance:
        minimum: 0
        type: number
      first_name:
        maxLength: 100
        type: string
      is_merchant:
        default: false
        type: boolean
      last_name:
        maxLength: 100
        type: string
    required:
    - balance
    - first_name
    - last_name
    type: object
  response.OrderResponse:
    properties:
      amount:
        type: number
      created_at:
        type: string
      id:
        type: string
      payee:
        type: string
      payer:
        type: string
    type: object
  response.UserResponse:
    properties:
      balance:
        type: number
      created_at:
        type: string
      document:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      is_merchant:
        type: boolean
      last_name:
        type: string
      password:
        type: string
      updated_at:
        type: string
    type: object
host: localhost:9000
info:
  contact:
    email: felipeversiane09@gmail.com
    name: API Support
  description: REST API for a PicPay Challange.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: PicPay Challange
  version: "1.0"
paths:
  /order:
    post:
      consumes:
      - application/json
      description: Insert a new order with the provided order information
      parameters:
      - description: Order information for registration
        in: body
        name: orderRequest
        required: true
        schema:
          $ref: '#/definitions/request.OrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.OrderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http_error.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http_error.HttpError'
      summary: Insert a new order
      tags:
      - Orders
  /order/{id}:
    get:
      consumes:
      - application/json
      description: Retrieves order details based on the order ID provided as a parameter.
      parameters:
      - description: ID of the order to be retrieved
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information retrieved successfully
          schema:
            $ref: '#/definitions/response.OrderResponse'
        "400":
          description: 'Error: Invalid order ID'
          schema:
            $ref: '#/definitions/http_error.HttpError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/http_error.HttpError'
      summary: Find Order by ID
      tags:
      - Orders
  /user:
    post:
      consumes:
      - application/json
      description: Insert a new user with the provided user information
      parameters:
      - description: User information for registration
        in: body
        name: userRequest
        required: true
        schema:
          $ref: '#/definitions/request.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http_error.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http_error.HttpError'
      summary: Insert a new user
      tags:
      - Users
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user based on the ID provided as a parameter.
      parameters:
      - description: ID of the user to be deleted
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http_error.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http_error.HttpError'
      summary: Delete User
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Retrieves user details based on the user ID provided as a parameter.
      parameters:
      - description: ID of the user to be retrieved
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information retrieved successfully
          schema:
            $ref: '#/definitions/response.UserResponse'
        "400":
          description: 'Error: Invalid user ID'
          schema:
            $ref: '#/definitions/http_error.HttpError'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/http_error.HttpError'
      summary: Find User by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Updates user details based on the ID provided as a parameter.
      parameters:
      - description: ID of the user to be updated
        in: path
        name: id
        required: true
        type: string
      - description: User information for update
        in: body
        name: userRequest
        required: true
        schema:
          $ref: '#/definitions/request.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/http_error.HttpError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/http_error.HttpError'
      summary: Update User
      tags:
      - Users
  /user/find_user_by_document/{document}:
    get:
      consumes:
      - application/json
      description: Retrieves user details based on the user document provided as a
        parameter.
      parameters:
      - description: Document of the user to be retrieved
        in: path
        name: document
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information retrieved successfully
          schema:
            $ref: '#/definitions/response.UserResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/http_error.HttpError'
      summary: Find User by Document
      tags:
      - Users
  /user/find_user_by_email/{email}:
    get:
      consumes:
      - application/json
      description: Retrieves user details based on the user email provided as a parameter.
      parameters:
      - description: Email of the user to be retrieved
        in: path
        name: email
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User information retrieved successfully
          schema:
            $ref: '#/definitions/response.UserResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/http_error.HttpError'
      summary: Find User by Email
      tags:
      - Users
schemes:
- http
swagger: "2.0"
