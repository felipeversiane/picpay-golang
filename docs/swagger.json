{
    "schemes": [
        "http"
    ],
    "swagger": "2.0",
    "info": {
        "description": "REST API for a PicPay Challange.",
        "title": "PicPay Challange",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "felipeversiane09@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:9000",
    "basePath": "/api/v1",
    "paths": {
        "/order": {
            "post": {
                "description": "Insert a new order with the provided order information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Insert a new order",
                "parameters": [
                    {
                        "description": "Order information for registration",
                        "name": "orderRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.OrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.OrderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http_error.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http_error.HttpError"
                        }
                    }
                }
            }
        },
        "/order/{id}": {
            "get": {
                "description": "Retrieves order details based on the order ID provided as a parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Find Order by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the order to be retrieved",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.OrderResponse"
                        }
                    },
                    "400": {
                        "description": "Error: Invalid order ID",
                        "schema": {
                            "$ref": "#/definitions/http_error.HttpError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/http_error.HttpError"
                        }
                    }
                }
            }
        },
        "/user": {
            "post": {
                "description": "Insert a new user with the provided user information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Insert a new user",
                "parameters": [
                    {
                        "description": "User information for registration",
                        "name": "userRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http_error.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http_error.HttpError"
                        }
                    }
                }
            }
        },
        "/user/find_user_by_document/{document}": {
            "get": {
                "description": "Retrieves user details based on the user document provided as a parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Find User by Document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Document of the user to be retrieved",
                        "name": "document",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.UserResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/http_error.HttpError"
                        }
                    }
                }
            }
        },
        "/user/find_user_by_email/{email}": {
            "get": {
                "description": "Retrieves user details based on the user email provided as a parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Find User by Email",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Email of the user to be retrieved",
                        "name": "email",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.UserResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/http_error.HttpError"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "description": "Retrieves user details based on the user ID provided as a parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Find User by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user to be retrieved",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/response.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Error: Invalid user ID",
                        "schema": {
                            "$ref": "#/definitions/http_error.HttpError"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/http_error.HttpError"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates user details based on the ID provided as a parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Update User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user to be updated",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User information for update",
                        "name": "userRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.UserUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http_error.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http_error.HttpError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a user based on the ID provided as a parameter.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Delete User",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID of the user to be deleted",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/http_error.HttpError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/http_error.HttpError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "http_error.Causes": {
            "type": "object",
            "properties": {
                "field": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "http_error.HttpError": {
            "type": "object",
            "properties": {
                "causes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/http_error.Causes"
                    }
                },
                "code": {
                    "type": "integer"
                },
                "error": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "request.OrderRequest": {
            "type": "object",
            "required": [
                "amount",
                "payee",
                "payer"
            ],
            "properties": {
                "amount": {
                    "type": "number",
                    "minimum": 0.01
                },
                "payee": {
                    "type": "string"
                },
                "payer": {
                    "type": "string"
                }
            }
        },
        "request.UserRequest": {
            "type": "object",
            "required": [
                "balance",
                "document",
                "email",
                "first_name",
                "last_name",
                "password"
            ],
            "properties": {
                "balance": {
                    "type": "number",
                    "minimum": 0
                },
                "document": {
                    "type": "string",
                    "maxLength": 11,
                    "minLength": 4
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 50
                },
                "is_merchant": {
                    "type": "boolean",
                    "default": false
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 50
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                }
            }
        },
        "request.UserUpdateRequest": {
            "type": "object",
            "required": [
                "balance",
                "first_name",
                "last_name"
            ],
            "properties": {
                "balance": {
                    "type": "number",
                    "minimum": 0
                },
                "first_name": {
                    "type": "string",
                    "maxLength": 100
                },
                "is_merchant": {
                    "type": "boolean",
                    "default": false
                },
                "last_name": {
                    "type": "string",
                    "maxLength": 100
                }
            }
        },
        "response.OrderResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "payee": {
                    "type": "string"
                },
                "payer": {
                    "type": "string"
                }
            }
        },
        "response.UserResponse": {
            "type": "object",
            "properties": {
                "balance": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "document": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_merchant": {
                    "type": "boolean"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        }
    }
}